{"version":3,"sources":["core/xApi/constants.ts","core/xApi/statements/xapiEntityFactory.ts","core/xApi/tinCan.ts","core/xApi/statements/dataBuilders/course.ts","core/xApi/statements/dataBuilders/section.ts","core/xApi/statements/dataBuilders/questions/multipleChoice.ts","core/xApi/statements/dataBuilders/questions/fillInTheBlanks.ts","core/xApi/statements/dataBuilders/questions/openQuestion.ts","core/xApi/statements/dataBuilders/questions/statement.ts","core/xApi/statements/dataBuilders/questions/rankingText.ts","core/xApi/statements/dataBuilders/questions/textMatching.ts","core/xApi/statements/dataBuilders/questions/scenario.ts","core/xApi/statements/dataBuilders/questions/dragAndDrop.ts","core/xApi/statements/dataBuilders/questions/hotspot.ts","core/xApi/statements/dataBuilders/questions/index.ts","core/xApi/statements/dataBuilders/questions/informationContent.ts","core/xApi/statements/factory.ts","core/xApi/errors/errorHandler.ts","core/xApi/events/EventHandler.ts","core/xApi/statements/storage.ts","core/xApi/statements/sender.ts","core/xApi/events/LrsEventHandler.ts","core/xApi/events/NpsEventHandler.ts","core/xApi/index.ts"],"names":["separators","interactionTypes","activityTypes","extensionKeys","verbs","started","id","display","stopped","passed","failed","experienced","answered","mastered","progressed","evaluated","sectionActivity","section","TinCan","Activity","getSectionAbsoluteUrl","definition","ActivityDefinition","type","name","title","result","score","omitScore","response","Result","Score","scaled","courseId","sessionId","course","actor","lrs","nps","this","attemptId","settings","defaultLrsUrl","initializeInstance","getLrsRecordStore","defaultNpsUrl","getNpsRecordStore","instance","recordStore","courseName","addRecordStore","getActor","activity","getCurrentUrl","context","getDefaultContext","endpoint","uri","selectedLrs","LRS","version","username","credentials","password","allowFail","email","account","Agent","mbox","extendContext","Context","contextActivities","ContextActivities","extensions","registration","courseStarted","verb","courseProgressed","isPassed","courseEvaluated","sectionProgressed","object","question","answers","filter","e","indexOf","map","join","correctResponsesPattern","questionTypes","correctAnswerId","isCorrect","interactionType","extraActivityDefinition","choices","option","description","image","text","questionContent","Object","keys","data","key","answerGroups","answerGroup","correctAnswer","find","value","answeredText","getOptions","array","index","toString","sources","targets","userResponse","i","answer","shownSelectedValue","source","target","answerTexts","dropspots","x","y","dropSpot","userAnswer","answerItem","items","length","answerDropSpot","background","spots","spot","coords","questionAnswered","buildStatementData","multipleChoice","fillInTheBlanks","openQuestion","statement","rankingText","textMatching","scenario","dragAndDrop","hotspot","Error","getBuilder","rawData","tinCan","parent","hasOwnProperty","isSurvey","defaultContext","assign","activityDefinition","getQuestionAbsoluteUrl","questionExperienced","informationContentExperienced","listStatement","forEach","builder","Statement","console","error","errorToString","code","mesg","EventHandler","sendStatement","shouldHandlerErrors","handlers","factoryMethod","arg","a","async","handle","args","statementFactory","errorHandler","BaseEventHandler","statements","push","promises","batchSize","isAllowedStatement","storage","sendStorageStatements","Promise","all","doSend","sendStatements","bind","allowedVerbs","shift","statementsToSend","splice","send","resolve","reject","failedResult","err","LrsEventHandler","statementSender","sendLrsStatement","isScoringOfContentPagesAllowed","event","events","COURSE_STARTED","createHandler","COURSE_PROGRESSED","SECTION_PROGRESSED","QUESTION_ANSWERED","INFORMATION_CONTENT_EXPERIENCED","NpsEventHandler","sendNpsStatement","COURSE_EVALUATED","XApi","lrsEventHandler","npsEventHandler","initializeLrs","xApi","unsubscribeLrs","on","initializeNps","unsubscribeNps","errorToConsole","off","initialize"],"mappings":"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","file":"static/js/0.9f6ef157.chunk.js","sourcesContent":["export const defaultLrsName = 'default';\n\nexport const separators = {\n  comma: '[,]',\n  dot: '[.]'\n};\n\nexport const interactionTypes = {\n  choice: 'choice',\n  fillIn: 'fill-in',\n  matching: 'matching',\n  dragAndDrop: 'dragAndDrop',\n  hotspot: 'hotspot',\n  sequencing: 'sequencing',\n  other: 'other'\n};\n\nexport const activityTypes = {\n  course: 'http://adlnet.gov/expapi/activities/course',\n  objective: 'http://adlnet.gov/expapi/activities/objective',\n  interaction: 'http://adlnet.gov/expapi/activities/cmi.interaction'\n};\n\nexport const extensionKeys = {\n  courseId: 'http://easygenerator/expapi/course/id',\n  surveyMode: 'http://easygenerator/expapi/question/survey',\n  questionType: 'http://easygenerator/expapi/question/type',\n  imageUrl: 'http://easygenerator/expapi/question/imageUrl',\n  content: 'http://easygenerator/expapi/question/content',\n  answerTexts: 'http://easygenerator/expapi/question/answers'\n};\n\nexport const verbs = {\n  started: {\n    id: 'http://adlnet.gov/expapi/verbs/launched',\n    display: {\n      'en-US': 'started'\n    }\n  },\n  stopped: {\n    id: 'http://adlnet.gov/expapi/verbs/exited',\n    display: {\n      'en-US': 'stopped'\n    }\n  },\n  passed: {\n    id: 'http://adlnet.gov/expapi/verbs/passed',\n    display: {\n      'en-US': 'passed'\n    }\n  },\n  failed: {\n    id: 'http://adlnet.gov/expapi/verbs/failed',\n    display: {\n      'en-US': 'failed'\n    }\n  },\n  experienced: {\n    id: 'http://adlnet.gov/expapi/verbs/experienced',\n    display: {\n      'en-US': 'experienced'\n    }\n  },\n  answered: {\n    id: 'http://adlnet.gov/expapi/verbs/answered',\n    display: {\n      'en-US': 'answered'\n    }\n  },\n  mastered: {\n    id: 'http://adlnet.gov/expapi/verbs/mastered',\n    display: {\n      'en-US': 'mastered'\n    }\n  },\n  progressed: {\n    id: 'http://adlnet.gov/expapi/verbs/progressed',\n    display: {\n      'en-US': 'progressed'\n    }\n  },\n  evaluated: {\n    id: 'http://www.tincanapi.co.uk/verbs/evaluated',\n    display: {\n      'en-US': 'evaluated'\n    }\n  }\n};\n","import { getCurrentUrl } from 'utils/window';\nimport TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { getSectionAbsoluteUrl } from 'utils/navigation';\nimport { activityTypes } from '../constants';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const courseActivity = (courseName: any) =>\n  new TinCan.Activity({\n    id: getCurrentUrl(),\n    definition: new TinCan.ActivityDefinition({\n      type: activityTypes.course,\n      name: {\n        'en-US': courseName\n      }\n    })\n  });\n\nexport const sectionActivity = (section: any) =>\n  new TinCan.Activity({\n    id: getSectionAbsoluteUrl(section.id),\n    definition: new TinCan.ActivityDefinition({\n      type: activityTypes.objective,\n      name: {\n        'en-US': section.title\n      }\n    })\n  });\n\nexport const result = ({ score, omitScore = false, response }: any) =>\n  new TinCan.Result({\n    ...(!omitScore && {\n      score: new TinCan.Score({\n        scaled: score / 100\n      })\n    }),\n    ...(response && { response })\n  });\n","import TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { defaultLrsName, extensionKeys } from './constants';\nimport { courseActivity } from './statements/xapiEntityFactory';\n\nclass TinCanWrapper {\n  courseId: any;\n  sessionId: any;\n  course: any;\n  actor: any;\n  lrs: any;\n  nps: any;\n\n  initialize({ course, actor }: any) {\n    this.courseId = course.id;\n    this.sessionId = course.attemptId;\n    this.course = course;\n    this.actor = actor;\n    // TinCan.enableDebug();\n  }\n\n  initializeLrs(settings: any, defaultLrsUrl: any) {\n    this.lrs = new TinCan();\n    this.initializeInstance(this.lrs, this.getLrsRecordStore(settings, defaultLrsUrl));\n  }\n\n  initializeNps(defaultNpsUrl: any) {\n    this.nps = new TinCan();\n    this.initializeInstance(this.nps, this.getNpsRecordStore(defaultNpsUrl));\n  }\n\n  initializeInstance(instance: any, recordStore: any) {\n    instance.addRecordStore(recordStore);\n    instance.actor = this.getActor(this.actor);\n    instance.activity = courseActivity(this.course.title);\n    instance.context = this.getDefaultContext();\n  }\n\n  getLrsRecordStore(settings: any, defaultLrsUrl: any) {\n    let { uri: endpoint } = settings.lrs;\n    if (settings.selectedLrs === defaultLrsName) {\n      endpoint = `${defaultLrsUrl}/xApi`;\n    }\n    return new TinCan.LRS({\n      endpoint,\n      version: settings.version,\n      username: settings.lrs.credentials.username,\n      password: settings.lrs.credentials.password,\n      allowFail: false\n    });\n  }\n\n  getNpsRecordStore(defaultNpsUrl: any) {\n    return new TinCan.LRS({\n      endpoint: `${defaultNpsUrl}/xApi`,\n      username: '',\n      password: '',\n      allowFail: false\n    });\n  }\n\n  getActor({ username, email, account }: any) {\n    if (account) {\n      return new TinCan.Agent({\n        name: username,\n        account\n      });\n    }\n    return new TinCan.Agent({\n      name: username,\n      mbox: `mailto:${email}`\n    });\n  }\n\n  getDefaultContext() {\n    return this.extendContext(\n      new TinCan.Context({\n        contextActivities: new TinCan.ContextActivities({})\n      })\n    );\n  }\n\n  extendContext(context: any) {\n    context.extensions = context.extensions || {};\n    context.extensions[extensionKeys.courseId] = this.courseId;\n    context.registration = this.sessionId;\n    return context;\n  }\n}\n\nexport default new TinCanWrapper();\n","import { verbs } from '../../constants';\nimport { result } from '../xapiEntityFactory';\n\nexport const courseStarted = () => ({\n  verb: verbs.started\n});\n\nexport const courseProgressed = ({ course }: any) => ({\n  verb: course.isPassed ? verbs.passed : verbs.progressed,\n  result: result({ score: course.score })\n});\n\nexport const courseStopped = () => ({\n  verb: verbs.stopped\n});\n\nexport const courseEvaluated = ({ score, response }: any) => ({\n  verb: verbs.evaluated,\n  result: result({ score, response })\n});\n","import { verbs } from '../../constants';\nimport { result, sectionActivity } from '../xapiEntityFactory';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const sectionProgressed = (section: any) => ({\n  verb: section.isPassed ? verbs.mastered : verbs.progressed,\n  object: sectionActivity(section),\n  result: result({ score: section.score })\n});\n","import * as questionTypes from 'constants/questionTypes';\nimport { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.answers\n    .filter((e: any) => question.response.indexOf(e.id) >= 0)\n    .map((e: any) => e.id)\n    .join(separators.comma);\n  const correctResponsesPattern =\n    question.type === questionTypes.SINGLE_CHOICE_IMAGE\n      ? question.correctAnswerId\n      : question.answers\n          .filter((e: any) => e.isCorrect)\n          .map((e: any) => e.id)\n          .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.choice,\n    extraActivityDefinition: {\n      choices: question.answers.map((option: any) => ({\n        id: option.id,\n        description: {\n          'en-US': question.type === questionTypes.SINGLE_CHOICE_IMAGE ? option.image : option.text\n        }\n      }))\n    }\n  };\n};\n","import { interactionTypes, separators, extensionKeys } from '../../../constants';\n\nexport default (question: any, questionContent: any) => {\n  const response = Object.keys(question.response.data)\n    .map(key => `${question.response.data[key]}${separators.dot}${key}`)\n    .join(separators.comma);\n\n  const correctResponsesPattern = question.answerGroups\n    .map((answerGroup: any) => {\n      const correctAnswer = answerGroup.answers.find((e: any) => e.isCorrect);\n      return `${correctAnswer.text}${separators.dot}${answerGroup.id}`;\n    })\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.fillIn,\n    extensions: {\n      [extensionKeys.content]: questionContent[0].value\n    }\n  };\n};\n","import { interactionTypes } from '../../../constants';\n\nexport default (question: any) => ({\n  response: question.response.answeredText,\n  omitScore: true,\n  interactionType: interactionTypes.other\n});\n","import { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.response\n    .map((e: any) => `${e.id}${separators.dot}${e.isCorrect}`)\n    .join(separators.comma);\n  const correctResponsesPattern = question.answers\n    .map((e: any) => `${e.id}${separators.dot}${e.isCorrect}`)\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.choice,\n    extraActivityDefinition: {\n      choices: question.answers.map((option: any) => ({\n        id: option.id,\n        description: {\n          'en-US': option.text\n        }\n      }))\n    }\n  };\n};\n","import { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.response.map((e: any) => e.text).join(separators.comma);\n  const correctResponsesPattern = question.answers.map((e: any) => e.text).join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.choice,\n    extraActivityDefinition: {\n      choices: question.answers.map((option: any) => ({\n        id: option.text,\n        description: {\n          'en-US': option.text\n        }\n      }))\n    }\n  };\n};\n","import { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const getOptions = (array: any) =>\n    array.map((e: any, index: any) => ({\n      id: index.toString(),\n      description: {\n        'en-US': e\n      }\n    }));\n\n  const sources = question.answers.map((e: any) => e.key);\n  const targets = question.answers\n    .map((e: any) => e.value)\n    .filter((e: any, index: any, array: any) => array.indexOf(e) === index);\n\n  const correctResponsesPattern = question.answers\n    .map((e: any) => `${sources.indexOf(e.key)}${separators.dot}${targets.indexOf(e.value)}`)\n    .join(separators.comma);\n\n  const response = sources\n    .map((e: any, index: any) => {\n      const userResponse = question.response.find((i: any) => i.key === e);\n      let answer = '';\n      if (userResponse && userResponse.shownSelectedValue) {\n        answer = targets.indexOf(userResponse.shownSelectedValue);\n      }\n      return `${index}${separators.dot}${answer}`;\n    })\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.matching,\n    extraActivityDefinition: {\n      source: getOptions(sources),\n      target: getOptions(targets)\n    }\n  };\n};\n","import { interactionTypes } from '../../../constants';\n\nexport default () => ({\n  interactionType: interactionTypes.other\n});\n","import { interactionTypes, separators, extensionKeys } from '../../../constants';\n\nconst NOT_ANSWERED_PATTERN = '(-1,-1)';\n\nexport default (question: any) => {\n  const answerTexts = question.dropspots.map((e: any) => e.text).join(separators.comma);\n  const correctResponsesPattern = question.dropspots\n    .map((e: any) => `(${e.x},${e.y})`)\n    .join(separators.comma);\n  const response = question.dropspots\n    .map((dropSpot: any) => {\n      const userAnswer = question.response.find((answer: any) => answer.id === dropSpot.id);\n      if (!userAnswer) {\n        return NOT_ANSWERED_PATTERN;\n      }\n\n      const answerItem = userAnswer.items.length && userAnswer.items[0];\n      if (!answerItem) {\n        return NOT_ANSWERED_PATTERN;\n      }\n\n      const answerDropSpot = question.dropspots.find((e: any) => e.id === answerItem.id);\n      return `(${answerDropSpot.x},${answerDropSpot.y})`;\n    })\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.other,\n    extensions: {\n      [extensionKeys.imageUrl]: question.background,\n      [extensionKeys.answerTexts]: answerTexts\n    }\n  };\n};\n","import { interactionTypes, separators, extensionKeys } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.response.map((e: any) => `(${e.x},${e.y})`).join(separators.comma);\n  const correctResponsesPattern = question.spots\n    .map((spot: any) => spot.map((coords: any) => `(${coords.x},${coords.y})`).join(separators.dot))\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.other,\n    extensions: {\n      [extensionKeys.imageUrl]: question.background\n    }\n  };\n};\n","import { getQuestionAbsoluteUrl } from 'utils/navigation';\nimport * as questionTypes from 'constants/questionTypes';\nimport TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { activityTypes, verbs, extensionKeys } from '../../../constants';\nimport { sectionActivity, result } from '../../xapiEntityFactory';\nimport tinCan from '../../../tinCan';\n\nimport multipleChoice from './multipleChoice';\nimport fillInTheBlanks from './fillInTheBlanks';\nimport openQuestion from './openQuestion';\nimport statement from './statement';\nimport rankingText from './rankingText';\nimport textMatching from './textMatching';\nimport scenario from './scenario';\nimport dragAndDrop from './dragAndDrop';\nimport hotspot from './hotspot';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const questionAnswered = ([question, section, questionContent]: any) =>\n  buildStatementData(question, section, getBuilder(question)(question, questionContent));\n\nfunction getBuilder(question: any) {\n  switch (question.type) {\n    case questionTypes.SINGLE_CHOICE:\n    case questionTypes.MULTIPLE_CHOICE:\n    case questionTypes.SINGLE_CHOICE_IMAGE:\n      return multipleChoice;\n    case questionTypes.FILL_IN_THE_BLANK:\n      return fillInTheBlanks;\n    case questionTypes.OPEN_QUESTION:\n      return openQuestion;\n    case questionTypes.STATEMENT_CHOICE:\n      return statement;\n    case questionTypes.RANKING_TEXT:\n      return rankingText;\n    case questionTypes.TEXT_MATCHING:\n      return textMatching;\n    case questionTypes.SCENARIO:\n      return scenario;\n    case questionTypes.DRAG_AND_DROP_TEXT:\n      return dragAndDrop;\n    case questionTypes.HOTSPOT:\n      return hotspot;\n    default:\n      throw new Error(`Question type ${question.type} is not supported`);\n  }\n}\n\nexport function buildStatementData(question: any, section: any, rawData: any) {\n  const {\n    response,\n    correctResponsesPattern,\n    interactionType,\n    extraActivityDefinition,\n    omitScore,\n    extensions,\n    verb\n  } = rawData;\n  const context = defaultContext(question, section);\n  context.extensions = Object.assign(context.extensions, extensions);\n\n  let activityDefinition = {\n    name: {\n      'en-US': question.title\n    },\n    type: activityTypes.interaction,\n    interactionType,\n    ...(correctResponsesPattern && {\n      correctResponsesPattern: question.isSurvey ? [] : [correctResponsesPattern]\n    })\n  };\n  activityDefinition = Object.assign(activityDefinition, extraActivityDefinition);\n\n  return {\n    context,\n    verb: verb || verbs.answered,\n    object: new TinCan.Activity({\n      id: getQuestionAbsoluteUrl(section.id, question.id),\n      definition: new TinCan.ActivityDefinition(activityDefinition)\n    }),\n    result: result({ score: question.score, omitScore, response })\n  };\n}\n\nfunction defaultContext(question: any, section: any) {\n  return tinCan.extendContext(\n    new TinCan.Context({\n      contextActivities: new TinCan.ContextActivities({\n        parent: [sectionActivity(section)]\n      }),\n      extensions: {\n        [extensionKeys.surveyMode]: question.hasOwnProperty('isSurvey') && question.isSurvey,\n        [extensionKeys.questionType]: question.type\n      }\n    })\n  );\n}\n","import { buildStatementData } from '.';\nimport { verbs, interactionTypes } from '../../../constants';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const questionExperienced = ([question, section]: any) =>\n  buildStatementData(question, section, {\n    interactionType: interactionTypes.other,\n    verb: verbs.experienced\n  });\n","import TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { courseStarted, courseProgressed, courseEvaluated } from './dataBuilders/course';\nimport { sectionProgressed } from './dataBuilders/section';\nimport { questionAnswered } from './dataBuilders/questions';\nimport { questionExperienced } from './dataBuilders/questions/informationContent';\n\nexport interface StatementNames {\n  courseStarted: any;\n  courseProgressed: any;\n  courseEvaluated: any;\n  sectionProgressed: any;\n  questionAnswered: any;\n  informationContentExperienced: any;\n};\n\ntype Statement = {\n  name: keyof StatementNames,\n  instance: any;\n}\n\nclass StatementFactory implements StatementNames {\n  courseStarted: any;\n  courseProgressed: any;\n  courseEvaluated: any;\n  sectionProgressed: any;\n  questionAnswered: any;\n  informationContentExperienced: any;\n  listStatement: Array<Statement>;\n\n  constructor() {\n    this.listStatement = [\n      { name: 'courseStarted', instance: courseStarted },\n      { name: 'courseProgressed', instance: courseProgressed },\n      { name: 'courseEvaluated', instance: courseEvaluated },\n      { name: 'sectionProgressed', instance: sectionProgressed },\n      { name: 'questionAnswered', instance: questionAnswered },\n      { name: 'informationContentExperienced', instance: questionExperienced }\n    ]\n    this.listStatement.forEach((builder: Statement) => {\n      this[builder.name] = (...args: any) => new TinCan.Statement(builder.instance(...args));\n    });\n  }\n}\n\nexport default new StatementFactory();\n","export default (e: any) => {\n  console.error(`xApi error: [ ${errorToString(e)} ]`);\n  // TODO: add error handling logic\n};\n\nexport function errorToConsole(e: any) {\n  console.error(`xApi error: [ ${errorToString(e)} ]`);\n}\n\nfunction errorToString(e: any) {\n  if (!e) return 'undefined error';\n  // tinCan error\n  if (e.code && e.mesg) {\n    return `code: ${e.code}, message: ${e.mesg}`;\n  }\n\n  return e.toString();\n}\n","import BaseEventHandler from 'core/events/eventHandler';\nimport statementFactory, { StatementNames } from '../statements/factory';\nimport errorHandler from '../errors/errorHandler';\n\nexport default class EventHandler extends BaseEventHandler {\n  handlers: any[];\n  sendStatement: any;\n  shouldHandlerErrors: any;\n\n  constructor({ sendStatement, shouldHandlerErrors }: any) {\n    super();\n    this.handlers = [];\n    this.sendStatement = sendStatement;\n    this.shouldHandlerErrors = shouldHandlerErrors;\n  }\n\n  createHandler(factoryMethod: any) {\n    return async (arg: any) => {\n      await this.handle(factoryMethod, arg);\n    };\n  }\n\n  async handle(factoryMethod: keyof StatementNames, args: any) {\n    try {\n      const statement = statementFactory[factoryMethod](args);\n      await this.sendStatement(statement);\n    } catch (e) {\n      if (this.shouldHandlerErrors) {\n        errorHandler(e);\n      } else {\n        throw e;\n      }\n    }\n  }\n}\n","class Storage {\n  statements: any[];\n\n  constructor() {\n    this.statements = [];\n  }\n\n  push(statement: any) {\n    this.statements.push(statement);\n  }\n\n  shift() {\n    const value = this.statements;\n    this.statements = [];\n    return value;\n  }\n}\n\nexport default new Storage();\n","import tinCan from '../tinCan';\nimport storage from './storage';\n\nclass StatementSender {\n  settings: any;\n  promises: any;\n  batchSize: any;\n\n  initialize(settings: any) {\n    this.settings = settings;\n    this.promises = [];\n    this.batchSize = 5;\n  }\n\n  sendLrsStatement(statement: any) {\n    if (!this.isAllowedStatement(statement)) {\n      return;\n    }\n\n    storage.push(statement);\n    this.sendStorageStatements();\n    return Promise.all(this.promises);\n  }\n\n  sendNpsStatement(statement: any) {\n    this.doSend(tinCan.nps.sendStatements.bind(tinCan.nps), [statement]);\n  }\n\n  isAllowedStatement(statement: any) {\n    return this.settings.allowedVerbs.indexOf(statement.verb.display['en-US']) >= 0;\n  }\n\n  sendStorageStatements() {\n    const statements = storage.shift();\n\n    if (statements.length !== 0) {\n      while (statements.length) {\n        const statementsToSend = statements.splice(0, this.batchSize);\n        this.promises.push(\n          this.doSend(tinCan.lrs.sendStatements.bind(tinCan.lrs), statementsToSend)\n        );\n      }\n    }\n  }\n\n  doSend(send: any, data: any) {\n    return new Promise((resolve, reject) => {\n      send(data, (result: any) => {\n        if (result) {\n          const failedResult = result.find((e: any) => e.err);\n          if (failedResult) {\n            reject(failedResult.err);\n          }\n        }\n        resolve();\n      });\n    });\n  }\n}\n\nexport default new StatementSender();\n","import { events } from 'core/events/eventEmitter';\nimport EventHandler from './EventHandler';\nimport statementSender from '../statements/sender';\n\nexport default class LrsEventHandler extends EventHandler {\n  constructor() {\n    super({\n      sendStatement: statementSender.sendLrsStatement.bind(statementSender),\n      shouldHandlerErrors: true\n    });\n  }\n\n  initialize({ isScoringOfContentPagesAllowed }: any) {\n    this.handlers = [\n      { event: events.COURSE_STARTED, instance: this.createHandler('courseStarted') },\n      { event: events.COURSE_PROGRESSED, instance: this.createHandler('courseProgressed') },\n      { event: events.SECTION_PROGRESSED, instance: this.createHandler('sectionProgressed') },\n      { event: events.QUESTION_ANSWERED, instance: this.createHandler('questionAnswered') }\n    ];\n\n    if (isScoringOfContentPagesAllowed) {\n      this.handlers.push({\n        event: events.INFORMATION_CONTENT_EXPERIENCED,\n        instance: this.createHandler('informationContentExperienced')\n      });\n    }\n  }\n}\n","import { events } from 'core/events/eventEmitter';\nimport EventHandler from './EventHandler';\nimport statementSender from '../statements/sender';\n\nexport default class NpsEventHandler extends EventHandler {\n  constructor() {\n    super({ sendStatement: statementSender.sendNpsStatement.bind(statementSender) });\n  }\n\n  initialize() {\n    this.handlers = [\n      {\n        event: events.COURSE_EVALUATED,\n        instance: this.createHandler('courseEvaluated')\n      }\n    ];\n  }\n}\n","import tinCan from './tinCan';\nimport LrsEventHandler from './events/LrsEventHandler';\nimport NpsEventHandler from './events/NpsEventHandler';\nimport statementSender from './statements/sender';\nimport errorHandler, { errorToConsole } from './errors/errorHandler';\n\nclass XApi {\n  lrsEventHandler: any;\n  npsEventHandler: any;\n  settings: any;\n  defaultLrsUrl: any;\n  defaultNpsUrl: any;\n\n  constructor() {\n    this.lrsEventHandler = new LrsEventHandler();\n    this.npsEventHandler = new NpsEventHandler();\n  }\n\n  subscribeLrs() {\n    try {\n      tinCan.initializeLrs(this.settings.xApi, this.defaultLrsUrl);\n    } catch (e) {\n      this.unsubscribeLrs();\n      errorHandler(e);\n    }\n    this.lrsEventHandler.on();\n  }\n\n  subscribeNps() {\n    try {\n      tinCan.initializeNps(this.defaultNpsUrl);\n    } catch (e) {\n      this.unsubscribeNps();\n      errorToConsole(e);\n    }\n    this.npsEventHandler.on();\n  }\n\n  unsubscribeLrs() {\n    this.lrsEventHandler.off();\n  }\n\n  unsubscribeNps() {\n    this.npsEventHandler.off();\n  }\n\n  unsubscribeAll() {\n    this.unsubscribeLrs();\n    this.unsubscribeNps();\n  }\n\n  initialize({ settings, defaultLrsUrl, defaultNpsUrl, course, actor }: any) {\n    this.settings = settings;\n    this.defaultLrsUrl = defaultLrsUrl;\n    this.defaultNpsUrl = defaultNpsUrl;\n    this.lrsEventHandler.initialize(settings);\n    this.npsEventHandler.initialize();\n    tinCan.initialize({ course, actor });\n    statementSender.initialize(settings.xApi);\n  }\n}\n\nexport default new XApi();\n"],"sourceRoot":""}