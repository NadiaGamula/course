{"version":3,"sources":["components/review/LoginForm/LoginForm.styled.ts","components/review/LoginForm/LoginForm.tsx","components/review/CommentForm/CommentForm.styled.ts","components/review/CommentForm/CommentForm.tsx","components/review/ReviewForm/ReviewForm.styled.ts","components/review/ReviewForm/ReviewForm.tsx","components/review/ReviewSpot/ReviewSpot.styled.ts","components/review/ReviewSpot/ReviewSpot.tsx","components/review/ReviewSpot/index.ts"],"names":["FormTitle","styled","h3","reviewFontText","LoginFormContainer","div","LoginInput","Input","LoginInputWrapper","props","validationStatusBeforeSubmit","css","LoginForm","name","email","onChange","onBlur","getRefs","localize","idInput","type","INPUT_TYPE","TEXT","refInput","node","labelText","placeholder","validIcon","pattern","textError","theme","EMAIL","autoComplete","CommentFormContainer","CommentTextarea","textarea","attrs","ariaLabel","validComment","transparentize","colors","textColor","incorrectColor","bounce","localizationKeys","REVIEW_COMMENT_PROPERTIES","DEFAULT_TITLE","TITLE","INTRODUCTION","LEARNING_CONTENT","QUESTION","VOICE_OVER","CONTENT_ITEM","TITLE_OF_THE_SECTION","GENERAL","CommentForm","commentText","isValidComment","context","isGeneral","title","property","REVIEW_COMMENT_TYPES","INFORMATION_CONTENT","COURSE","SECTION","getLocalizationKey","tabIndex","ref","value","FormWrapper","form","SubmitIcon","Icon","FormContent","contentBodyColor","media","mobile","FormActions","FormSubmitButton","button","buttonDefaultStyle","transition","FormCancelButton","SuccessMessageIcon","centerAbsoluteElementY","ErrorMessageIcon","SuccessMessage","crossFade","ErrorMessage","ReviewForm","loginRefs","getReviewerEmailAndName","a","async","eventEmitter","emit","events","REVIEW_RESTORE_USER","response","setState","beforeSubmitValidation","nameValid","validity","valid","emailValid","checkInputValidation","event","state","target","showLoginForm","element","validateComment","requestSending","isValidBeforeSubmit","trim","sendComment","preventDefault","REVIEWER_AUTHORIZED","data","text","showSuccessMessage","showErrorMessage","COMMENT_SENT","STATUS_OK","COMMENT_SENDING_FAILED","activeElem","document","activeElement","getAttribute","this","setTimeout","focus","closePopover","role","disabled","onClick","onKeyDown","key","size","React","CommentIcon","ToggleButtonText","span","ToggleButton","isActive","ReviewWrapper","isVoiceOver","small","large","ReviewSpot","toggle","isExpanded","closePopup","hintName","Hint","position","hintElements","trigger","open","onRequestClose","arrow","interactive","tooltipTheme","html","ariaModal","defaultProps","withTheme"],"mappings":"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","file":"static/js/5.c7eb0e3f.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport { reviewFontText } from 'components/mixins/reviewTypography';\nimport Input from '../../login/Input';\n\nexport const FormTitle = styled.h3`\n  ${reviewFontText};\n  font-weight: 300;\n  font-size: 13px;\n  margin-bottom: 24px;\n`;\n\nexport const LoginFormContainer = styled.div`\n  width: 100%;\n  ${FormTitle} {\n    padding-bottom: 44px;\n    margin-bottom: 0;\n    font-size: 20px;\n    text-align: center;\n  }\n  > div:not(:first-child) {\n    padding: 0 0 43px;\n    &:last-child {\n      padding: 0 0 8px;\n    }\n  }\n`;\n\nexport const LoginInput = styled(Input)`\n  input {\n    & + label {\n      font-size: 15px;\n    }\n  }\n`;\n\ntype LoginInputWrapperProps = {\n  validationStatusBeforeSubmit: boolean;\n};\nexport const LoginInputWrapper = styled.div<LoginInputWrapperProps>`\n  > div {\n    > div {\n      left: 0;\n      > span {\n        top: -11px;\n        font-size: 11px;\n      }\n      ${props =>\n        props.validationStatusBeforeSubmit === false &&\n        css`\n          visibility: visible;\n          top: 40px;\n          > span {\n            top: -6px;\n            visibility: visible;\n          }\n        `}\n    }\n\n    input {\n      width: 100%;\n      height: 30px;\n      background: #fff;\n      ${reviewFontText};\n      font-size: 15px;\n      font-weight: 600;\n      border: none;\n      border-radius: 0;\n      border-bottom: 1px solid #eaedf1;\n      box-shadow: none;\n      padding: 0 0 7px 0;\n\n      &.is-empty {\n        & + label {\n          font-size: 15px;\n          padding: 0;\n        }\n\n        &:focus {\n          & + label {\n            top: -15px;\n            padding: 0;\n            font-size: 11px;\n          }\n        }\n      }\n\n      &.full {\n        &:valid {\n          background-color: #fff;\n          box-shadow: none;\n          border: none;\n          border-bottom: 1px solid #eaedf1;\n        }\n        &:invalid {\n          background-color: #fff;\n          box-shadow: none;\n          border: none;\n          border-bottom: 1px solid #f85d67;\n        }\n        &:hover {\n          border-bottom: 1px solid #469dd5;\n        }\n        &:focus {\n          border-bottom: 2px solid #469dd5;\n          & + label {\n            top: -15px;\n            padding: 0;\n            font-size: 11px;\n          }\n        }\n        & + label {\n          top: -15px;\n          padding: 0;\n          font-size: 11px;\n        }\n      }\n\n      &:hover {\n        border-bottom: 1px solid #469dd5;\n      }\n\n      &:focus {\n        border: none;\n        border-bottom: 2px solid #469dd5;\n        box-shadow: none;\n        & + label {\n          top: -15px;\n          padding: 0;\n          font-size: 11px;\n        }\n      }\n\n      ${props =>\n        props.validationStatusBeforeSubmit === false &&\n        css`\n          & {\n            border: none;\n            border-bottom: 1px solid #f85d67;\n\n            & + label {\n              font-size: 15px;\n              padding: 0;\n            }\n\n            &.full {\n              &:invalid {\n                border: none;\n                border-bottom: 1px solid #f85d67;\n                box-shadow: none;\n                background: #fff;\n              }\n              border: none;\n              border-bottom: 1px solid #f85d67;\n            }\n\n            &:hover,\n            &:focus {\n              border-bottom: 1px solid #f85d67;\n\n              & + label {\n                top: -15px;\n                padding: 0;\n                font-size: 11px;\n              }\n            }\n          }\n        `};\n    }\n  }\n`;\n","import * as React from 'react';\nimport { localize } from 'core/localization';\nimport { INPUT_TYPE } from 'constants/components';\nimport { FormTitle, LoginInput, LoginFormContainer, LoginInputWrapper } from './LoginForm.styled';\n\ntype LoginFormProps = {\n  name: boolean;\n  email: boolean;\n  onChange(e?: any): void;\n  onBlur(e?: any): void;\n  getRefs(e?: any): void;\n  theme?: { [key: string]: any }\n};\n\nexport const LoginForm = (props: LoginFormProps) => {\n  const { name, email, onChange, onBlur, getRefs } = props;\n  return (\n    <LoginFormContainer>\n      <FormTitle>{localize('[please identify yourself]')}</FormTitle>\n      <LoginInputWrapper validationStatusBeforeSubmit={name}>\n        <LoginInput\n          idInput=\"name\"\n          type={INPUT_TYPE.TEXT}\n          refInput={(node: any) => getRefs(node)}\n          name=\"name\"\n          labelText=\"Name\"\n          placeholder=\"John Doe\"\n          onChange={onChange}\n          onBlur={onBlur}\n          validIcon={false}\n          pattern=\"^(?!\\s*$).+\"\n          textError={localize('[error name input]')}\n          validationStatusBeforeSubmit={name}\n          theme={props.theme}\n        />\n      </LoginInputWrapper>\n      <LoginInputWrapper validationStatusBeforeSubmit={email}>\n        <LoginInput\n          idInput=\"email\"\n          type={INPUT_TYPE.EMAIL}\n          refInput={(node: any) => getRefs(node)}\n          name=\"email\"\n          labelText=\"Email\"\n          placeholder=\"john@example.com\"\n          autoComplete=\"new-email\"\n          onChange={onChange}\n          onBlur={onBlur}\n          validIcon={false}\n          textError={localize('[error email input]')}\n          validationStatusBeforeSubmit={email}\n          theme={props.theme}\n        />\n      </LoginInputWrapper>\n    </LoginFormContainer>\n  );\n};\n\nexport default LoginForm;\n","import styled, { css } from 'styled-components';\nimport { reviewFontText } from 'components/mixins/reviewTypography';\nimport { bounce } from 'components/mixins/interactivity';\nimport { transparentize } from 'utils/color';\n\nexport const CommentFormContainer = styled.div`\n  width: 100%;\n`;\n\nexport const FormTitle = styled.h3`\n  ${reviewFontText};\n  font-weight: 600;\n  font-size: 13px;\n  margin-bottom: 24px;\n  text-align: left;\n`;\n\ntype CommentTextareaProps = {\n  ariaLabel: string;\n  validComment: boolean;\n}\nexport const CommentTextarea = styled.textarea.attrs((props: CommentTextareaProps) => ({\n  'aria-label': props.ariaLabel\n})) <CommentTextareaProps>`\n  ${reviewFontText};\n  display: block;\n  width: 100%;\n  height: 136px;\n  max-height: 136px;\n  padding: 12px;\n  margin-bottom: 4px;\n  resize: none;\n  border: 1px solid #eaedf1;\n  border-radius: 2px;\n  outline: none;\n  font-size: 12px;\n  line-height: 20px;\n\n  &:hover {\n    border-color: #76b6e0;\n  }\n\n  &:focus {\n    outline: none;\n    border-color: #469dd5;\n    box-shadow: inset 0 1px 3px 0 rgba(70, 157, 213, 0.3);\n  }\n\n  ${props =>\n    !props.validComment &&\n    css`\n      & {\n        background-color: ${transparentize(props.theme.colors.textColor, 0.02)};\n        box-shadow: inset 0 2px 0 0 ${transparentize(props.theme.colors.incorrectColor, 0.06)};\n        border: solid 1px ${props.theme.colors.incorrectColor};\n        ${bounce};\n      }\n    `};\n`;\n","import React from 'react';\nimport { localize } from 'core/localization';\nimport { FormTitle, CommentFormContainer, CommentTextarea } from './CommentForm.styled';\nimport { REVIEW_COMMENT_PROPERTIES, REVIEW_COMMENT_TYPES } from 'constants/review';\n\ntype CommentFormProps = {\n  commentText: string;\n  isValidComment: boolean;\n  onChange(e?: any): void;\n  getRefs(e?: any): void;\n  context: any;\n  isGeneral: boolean;\n};\n\nexport const localizationKeys: { [key: string]: string } = {\n  [REVIEW_COMMENT_PROPERTIES.DEFAULT_TITLE]: 'your comment',\n  [REVIEW_COMMENT_PROPERTIES.TITLE]: 'course comment',\n  [REVIEW_COMMENT_PROPERTIES.INTRODUCTION]: 'introduction comment',\n  [REVIEW_COMMENT_PROPERTIES.LEARNING_CONTENT]: 'learning content comment',\n  [REVIEW_COMMENT_PROPERTIES.QUESTION]: 'question comment',\n  [REVIEW_COMMENT_PROPERTIES.VOICE_OVER]: 'voice over comment',\n  [REVIEW_COMMENT_PROPERTIES.CONTENT_ITEM]: 'content item comment',\n  [REVIEW_COMMENT_PROPERTIES.TITLE_OF_THE_SECTION]: 'section comment',\n  [REVIEW_COMMENT_PROPERTIES.GENERAL]: 'leave general comments'\n};\n\nfunction getLocalizationKey({ type, property = '', isGeneral }: { type: string; property: string; isGeneral: boolean }): string {\n  if (isGeneral) {\n    return localizationKeys[REVIEW_COMMENT_PROPERTIES.GENERAL];\n  }\n  switch (type) {\n    case REVIEW_COMMENT_TYPES.QUESTION:\n      return localizationKeys[property] || localizationKeys[REVIEW_COMMENT_PROPERTIES.QUESTION];\n    case REVIEW_COMMENT_TYPES.INFORMATION_CONTENT:\n      return localizationKeys[property] || localizationKeys[REVIEW_COMMENT_PROPERTIES.CONTENT_ITEM];\n    case REVIEW_COMMENT_TYPES.COURSE:\n      return localizationKeys[property];\n    case REVIEW_COMMENT_TYPES.SECTION:\n      return localizationKeys[REVIEW_COMMENT_PROPERTIES.TITLE_OF_THE_SECTION];\n    default:\n      return localizationKeys[REVIEW_COMMENT_PROPERTIES.DEFAULT_TITLE];\n  }\n}\n\nexport const CommentForm = (props: CommentFormProps) => {\n  const { commentText, isValidComment, onChange, getRefs, context, isGeneral } = props;\n  const type = context && context.type;\n  const property = context && context.property;\n  const title = getLocalizationKey({ type, property, isGeneral });\n\n  return (\n    <CommentFormContainer>\n      <FormTitle>{localize(`[${title}]`)}</FormTitle>\n      <CommentTextarea\n        tabIndex={1}\n        ref={getRefs}\n        ariaLabel={localize('[comment area]')}\n        validComment={isValidComment}\n        onChange={onChange}\n        name=\"commentText\"\n        value={commentText}\n      />\n    </CommentFormContainer>\n  );\n};\n\nexport default CommentForm;\n","import styled from 'styled-components';\nimport buttonDefaultStyle from 'components/mixins/normalize';\nimport { reviewFontText } from 'components/mixins/reviewTypography';\nimport { crossFade, transition } from 'components/mixins/interactivity';\nimport media from 'components/mixins/media';\nimport { centerAbsoluteElementY } from 'components/mixins/placement';\nimport { transparentize } from 'utils/color';\nimport Icon from 'components/common/Icon';\n\nexport const CommentFormContainer = styled.div`\n  width: 100%;\n`;\n\nexport const FormWrapper = styled.form`\n  ${reviewFontText};\n  min-height: 285px;\n  max-height: 356px;\n`;\n\nexport const SubmitIcon = styled(Icon)`\n  margin: 0 5px 0 17px;\n  top: 1px;\n`;\n\nexport const FormContent = styled.div`\n  min-height: 285px;\n  background: ${props => props.theme.colors.contentBodyColor};\n  padding: 22px 14px 22px 16px;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  width: 430px;\n\n  ${media.mobile`\n    width: 300px;\n  `};\n`;\n\nexport const FormActions = styled.div`\n  align-self: flex-end;\n  padding-top: 16px;\n`;\n\ntype FormSubmitButtonProps = {\n  tabIndex: number;\n  disabled: any;\n  onClick: any;\n  onKeyDown: any;\n};\nexport const FormSubmitButton = styled.button<FormSubmitButtonProps>`\n  ${buttonDefaultStyle};\n  position: relative;\n  background: #4caf50;\n  border-radius: 16px;\n  padding: 10px 20px 10px 0;\n  color: #fff;\n  font-size: 11px;\n  line-height: 11px;\n  font-weight: 600;\n  cursor: pointer;\n  box-shadow: 0 2px 8px 0 ${transparentize('#000000', 0.2)};\n  ${transition(0.3)};\n\n  &:hover,\n  &:focus {\n    background: #46a14a;\n  }\n\n  &:disabled:before {\n    background-color: rgba(255, 255, 255, 0.3);\n    content: '';\n    cursor: not-allowed;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    top: 0;\n    width: 100%;\n  }\n`;\n\nexport const FormCancelButton = styled.button`\n  ${buttonDefaultStyle};\n  font-size: 11px;\n  font-weight: 600;\n  color: #99a9b8;\n  cursor: pointer;\n  margin-left: 10px;\n\n  &:hover,\n  &:focus {\n    color: #81c884;\n  }\n`;\n\nexport const SuccessMessageIcon = styled(Icon)`\n  ${centerAbsoluteElementY};\n  left: 8px;\n  color: #4caf50;\n  line-height: 7px;\n  position: absolute;\n`;\n\nexport const ErrorMessageIcon = styled.div`\n  ${centerAbsoluteElementY};\n  left: 12px;\n  color: #4caf50;\n  position: absolute;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nexport const SuccessMessage = styled.div`\n  ${reviewFontText};\n  line-height: 17px;\n  padding: 7px 13px 7px 27px;\n  background: #f6fbf7;\n  border-radius: 3px;\n  border: solid 1px #d3ecd4;\n  ${crossFade('fromRight')};\n  margin-top: 16px;\n  position: relative;\n  align-self: flex-end;\n`;\n\nexport const ErrorMessage = styled(SuccessMessage)`\n  background: rgba(248, 93, 103, 0.1);\n  border: solid 1px rgba(248, 93, 103, 0.3);\n`;\n","import * as React from 'react';\nimport { STATUS_OK, COMMENT_SENDING_FAILED } from 'constants/review';\nimport { localize } from 'core/localization';\nimport eventEmitter, { events } from 'core/events/eventEmitter';\nimport LoginForm from '../LoginForm/LoginForm';\nimport CommentForm from '../CommentForm/CommentForm';\nimport {\n  FormWrapper,\n  FormContent,\n  FormActions,\n  SubmitIcon,\n  FormSubmitButton,\n  FormCancelButton,\n  SuccessMessage,\n  SuccessMessageIcon,\n  ErrorMessage,\n  ErrorMessageIcon\n} from './ReviewForm.styled';\n\ntype ReviewFormProps = {\n  context: { [key: string]: any };\n  closePopover(e?: any): void;\n  isGeneral: boolean;\n  role: string;\n  ariaModal: boolean;\n  tabIndex: number;\n  theme?: { [key: string]: any }\n};\n\ntype ReviewFormState = {\n  requestSending: boolean;\n  commentText: string;\n  isValidComment: boolean;\n  showSuccessMessage: boolean;\n  showErrorMessage: boolean;\n  showLoginForm: boolean;\n  name: string;\n  email: string;\n  validationStatusBeforeSubmit: {\n    name: boolean;\n    email: boolean;\n  }\n}\nexport class ReviewForm extends React.Component<ReviewFormProps, ReviewFormState> {\n  loginRefs: { [key: string]: any };\n\n  constructor(props: ReviewFormProps) {\n    super(props);\n\n    this.state = {\n      requestSending: false,\n      commentText: '',\n      isValidComment: true,\n      showSuccessMessage: false,\n      showErrorMessage: false,\n      showLoginForm: false,\n      name: '',\n      email: '',\n      validationStatusBeforeSubmit: {\n        name: true,\n        email: true\n      }\n    };\n    this.getReviewerEmailAndName();\n    this.loginRefs = {\n      name: '',\n      email: ''\n    };\n  }\n\n  getReviewerEmailAndName = async () => {\n    const response: any = await eventEmitter.emit(events.REVIEW_RESTORE_USER);\n    this.setState({\n      name: response[0].name || '',\n      email: response[0].email || ''\n    });\n  };\n\n  beforeSubmitValidation = () => {\n    const nameValid = this.loginRefs.name ? this.loginRefs.name.validity.valid : false;\n    const emailValid = this.loginRefs.email ? this.loginRefs.email.validity.valid : false;\n    this.setState({\n      validationStatusBeforeSubmit: {\n        name: nameValid,\n        email: emailValid\n      }\n    });\n  };\n\n  checkInputValidation = (event: any) => {\n    if (event) {\n      this.setState({\n        validationStatusBeforeSubmit: {\n          ...this.state.validationStatusBeforeSubmit,\n          [event.target.name]: event.target.validity.valid || false\n        }\n      });\n    }\n  };\n\n  onChange = (event: any) => {\n    this.setState({ [event.target.name]: event.target.value } as any);\n  };\n\n  onBlur = (event: any) => {\n    this.setState({ [event.target.name]: event.target.value } as any);\n    return this.state.showLoginForm && this.checkInputValidation(event);\n  };\n\n  getRefs = (element: any) => {\n    if (element) {\n      this.loginRefs[element.name] = element;\n    }\n  };\n\n  validateComment = () => {\n    const {\n      email,\n      name,\n      commentText,\n      showLoginForm,\n      validationStatusBeforeSubmit,\n      requestSending\n    } = this.state;\n\n    const isValidBeforeSubmit =\n      validationStatusBeforeSubmit.email && validationStatusBeforeSubmit.name;\n\n    if (!commentText.trim()) {\n      this.setState({ isValidComment: false });\n      return false;\n    }\n    if (!email || !name) {\n      this.setState({\n        showLoginForm: true\n      });\n      return false;\n    }\n    if ((showLoginForm && !isValidBeforeSubmit) || requestSending) {\n      return false;\n    }\n\n    return true;\n  };\n\n  sendComment = async (event: any) => {\n    event.preventDefault();\n    if (this.state.showLoginForm) {\n      this.checkInputValidation(event);\n      this.beforeSubmitValidation();\n    }\n    const { context, isGeneral } = this.props;\n    const { email, name, commentText } = this.state;\n    if (!this.validateComment()) {\n      return;\n    }\n    eventEmitter.emit(events.REVIEWER_AUTHORIZED, { email, name });\n    const data: { [key: string]: any } = {\n      text: commentText\n    };\n\n    if (!isGeneral) {\n      data.context = context;\n    }\n    this.setState({\n      showSuccessMessage: false,\n      showErrorMessage: false,\n      requestSending: true\n    });\n    const response: any = await eventEmitter.emit(events.COMMENT_SENT, { data });\n\n    if (response[0] === STATUS_OK) {\n      this.setState({\n        showSuccessMessage: true,\n        showErrorMessage: false,\n        showLoginForm: false,\n        isValidComment: true,\n        commentText: '',\n        requestSending: false\n      });\n    }\n\n    if (response[0] === COMMENT_SENDING_FAILED) {\n      this.setState({\n        showErrorMessage: true,\n        showSuccessMessage: false,\n        requestSending: false\n      });\n    }\n  };\n\n  componentDidUpdate() {\n    const activeElem = document.activeElement;\n    if (\n      activeElem && activeElem.getAttribute('name') !== 'commentText' &&\n      this.loginRefs.commentText\n    ) {\n      setTimeout(() => {\n        this.loginRefs.commentText.focus();\n      }, 0);\n    }\n  }\n\n  render() {\n    const { closePopover, context, isGeneral } = this.props;\n    const {\n      showSuccessMessage,\n      showErrorMessage,\n      showLoginForm,\n      requestSending,\n      commentText,\n      isValidComment\n    } = this.state;\n    const { name, email } = this.state.validationStatusBeforeSubmit;\n    return (\n      <FormWrapper>\n        <FormContent theme={this.props.theme}>\n          {showLoginForm ? (\n            <LoginForm\n              getRefs={this.getRefs}\n              name={name}\n              email={email}\n              onChange={this.onChange}\n              onBlur={this.onBlur}\n              theme={this.props.theme}\n            />\n          ) : (\n              <CommentForm\n                getRefs={this.getRefs}\n                commentText={commentText}\n                isValidComment={isValidComment}\n                onChange={this.onChange}\n                context={context}\n                isGeneral={isGeneral}\n              />\n            )}\n          <FormActions role=\"presentation\">\n            <FormSubmitButton\n              tabIndex={1}\n              disabled={requestSending ? 'disabled' : false}\n              onClick={this.sendComment}\n              onKeyDown={(event: any) => {\n                if (event.key === 'Enter') {\n                  this.sendComment(event);\n                }\n              }}\n            >\n              <SubmitIcon size={9} name={'arrow-send'} theme={this.props.theme} />\n              {showLoginForm ? localize('[post comment]') : localize('[post]')}\n            </FormSubmitButton>\n            <FormCancelButton\n              tabIndex={1}\n              onClick={closePopover}\n              onKeyDown={event => {\n                if (event.key === 'Enter') {\n                  closePopover(event);\n                }\n              }}\n            >\n              {localize('[cancel]')}\n            </FormCancelButton>\n          </FormActions>\n          {showSuccessMessage && (\n            <SuccessMessage>\n              <SuccessMessageIcon theme={this.props.theme} size={9} name={'check-mark-2'} />\n              {localize('[comment has been sent successfully]')}\n            </SuccessMessage>\n          )}\n          {showErrorMessage && (\n            <ErrorMessage>\n              <ErrorMessageIcon>{'!'}</ErrorMessageIcon>\n              {localize('[error comment sending]')}\n            </ErrorMessage>\n          )}\n        </FormContent>\n      </FormWrapper>\n    );\n  }\n}\n\nexport default ReviewForm;\n","import styled, { css } from 'styled-components';\nimport { transparentize } from 'utils/color';\nimport media from 'components/mixins/media';\nimport { reviewFontText } from 'components/mixins/reviewTypography';\nimport { transition } from 'components/mixins/interactivity';\nimport Icon from 'components/common/Icon';\n\nexport const CommentIcon = styled(Icon)`\n  color: inherit;\n  margin: 0;\n\n  &.icon {\n    line-height: 13px;\n  }\n`;\n\nexport const ToggleButtonText = styled.span`\n  display: inline-block;\n  opacity: 0;\n  ${transition('all', '0.3s')};\n`;\n\ntype ToggleButtonProps = {\n  isGeneral: boolean;\n  isActive: boolean;\n};\nexport const ToggleButton = styled.div<ToggleButtonProps>`\n  ${reviewFontText};\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 600;\n  margin: 10px;\n  overflow: hidden;\n  ${props =>\n    props.isGeneral\n      ? css`\n          padding: 14px 39px 14px 0;\n          color: ${transparentize('#42515f', 0.5)};\n          background: #fff;\n          border-radius: 22px;\n          box-shadow: 0 2px 10px 0 ${transparentize('#000000', 0.1)};\n\n          height: 41px;\n          ${transition('all', '0.3s')};\n\n          &:hover {\n            max-width: 100%;\n          }\n\n          &:hover,\n          &:focus {\n            color: #4caf50;\n            outline: none;\n\n            ${CommentIcon} {\n              color: #4caf50;\n            }\n          }\n\n          ${CommentIcon} {\n            color: #73899e;\n            margin: 0 21px 0 15px;\n            transform: scale(1.4);\n            display: inline-block;\n            ${transition('all', '0.3s')};\n          }\n\n          ${props.isActive &&\n            css`\n              color: #4caf50;\n              box-shadow: inset 0 1px 3px 0 ${transparentize('#000000', 0.08)};\n\n              ${CommentIcon} {\n                color: #4caf50;\n              }\n            `}\n        `\n      : css`\n          width: 34px;\n          height: 34px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          color: #73899e;\n          background: #fff;\n          margin: 6px;\n          padding: 10px;\n          border-radius: 50%;\n          box-shadow: 0 2px 10px 0 ${transparentize('#000000', 0.1)};\n\n          &:hover,\n          &:focus {\n            color: #4caf50;\n            outline: none;\n          }\n\n          ${props.isActive &&\n            css`\n              background: #4caf50;\n              color: #fff;\n\n              &:hover,\n              &:focus {\n                color: #fff;\n                outline: none;\n              }\n            `}\n        `};\n`;\n\ntype ReviewWrapperProps = {\n  isVoiceOver: boolean;\n  isGeneral: boolean;\n  isActive: boolean;\n};\nexport const ReviewWrapper = styled.div<ReviewWrapperProps>`\n  background: ${transparentize('#191919', 0.02)};\n\n  & .active {\n    display: block !important;\n  }\n\n  ${props =>\n    props.isVoiceOver &&\n    css`\n      ${media.small`\n        display: none;\n      `};\n    `}\n\n  ${props =>\n    props.isGeneral\n      ? css`\n          position: fixed;\n          bottom: 8px;\n          right: 24px;\n          z-index: 101;\n\n          max-width: 61px;\n          white-space: nowrap;\n          ${transition('all', '0.3s')};\n\n          ${props.isActive &&\n            css`\n              max-width: 300px;\n\n              ${ToggleButtonText} {\n                opacity: 1;\n              }\n\n              ${ToggleButton} {\n                ${CommentIcon} {\n                  margin: 0 21px 0 24px;\n                  transform: scale(1);\n                }\n              }\n            `}\n\n          &:hover {\n            max-width: 300px;\n\n            ${ToggleButtonText} {\n              opacity: 1;\n            }\n            ${CommentIcon} {\n              color: #73899e;\n              margin: 0 21px 0 24px;\n              transform: scale(1);\n            }\n          }\n        `\n      : css`\n          position: absolute;\n          top: 0;\n          right: -52px;\n          z-index: 10;\n          display: flex;\n          ${media.large`\n            right: -22px;\n          `}\n        `}\n  border-radius: 30px;\n`;\n","import * as React from 'react';\nimport { Tooltip } from 'components/common';\nimport { localize } from 'core/localization';\nimport { Hint } from 'components/common/Hint/Hint';\nimport ReviewForm from '../ReviewForm';\nimport { CommentIcon, ReviewWrapper, ToggleButton, ToggleButtonText } from './ReviewSpot.styled';\nimport { withTheme } from 'styled-components';\n\ntype ReviewSpotProps = {\n  isGeneral: boolean;\n  isVoiceOver: boolean;\n  context: { [key: string]: any };\n  hintName: string;\n  theme?: {[key: string]: any};\n};\n\ntype ReviewSpotState = {\n  isExpanded: boolean;\n}\nexport class ReviewSpot extends React.Component<ReviewSpotProps, ReviewSpotState> {\n  constructor(props: ReviewSpotProps) {\n    super(props);\n\n    this.state = {\n      isExpanded: false\n    };\n  }\n\n  static defaultProps = {\n    isGeneral: false,\n    isVoiceOver: false\n  };\n\n  toggle = (event: any) => {\n    event.preventDefault();\n    this.setState({\n      isExpanded: !this.state.isExpanded\n    });\n  };\n\n  closePopup = () => {\n    this.setState({\n      isExpanded: false\n    });\n  };\n\n  render() {\n    const { isExpanded } = this.state;\n    const { isGeneral, context, hintName, isVoiceOver } = this.props;\n    return (\n      <ReviewWrapper isVoiceOver={isVoiceOver} isGeneral={isGeneral} isActive={isExpanded}>\n        <Hint\n          position={isGeneral ? 'top' : 'auto'}\n          hintElements={\n            isGeneral\n              ? localize('[click to leave a general comment]')\n              : localize('[click to leave a comment]')\n          }\n          hintName={hintName}\n          isExpanded={!!hintName}\n        >\n          <Tooltip\n            trigger={'manual'}\n            open={isExpanded}\n            onRequestClose={() => this.closePopup()}\n            arrow={true}\n            position={'right'}\n            interactive\n            tooltipTheme={'light'}\n            html={\n              <ReviewForm\n                role=\"dialog\"\n                ariaModal={true}\n                tabIndex={-1}\n                isGeneral={isGeneral}\n                context={context}\n                closePopover={this.toggle}\n                theme={this.props.theme}\n              />\n            }\n          >\n            <ToggleButton\n              role=\"button\"\n              tabIndex={1}\n              onClick={this.toggle}\n              onKeyDown={event => {\n                if (event.key === ` ` || event.key === 'Enter') {\n                  this.toggle(event);\n                }\n              }}\n              isActive={isExpanded}\n              isGeneral={isGeneral}\n            >\n              <CommentIcon size={isGeneral ? 9 : 10} name={'comment'} />\n              {isGeneral && (\n                <ToggleButtonText>{localize('[leave general comments]')}</ToggleButtonText>\n              )}\n            </ToggleButton>\n          </Tooltip>\n        </Hint>\n      </ReviewWrapper>\n    );\n  }\n}\n\nexport default withTheme(ReviewSpot);\n","export { default } from './ReviewSpot';\n"],"sourceRoot":""}