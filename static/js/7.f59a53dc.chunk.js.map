{"version":3,"sources":["core/scorm/lms.ts","core/scorm/lms2004.ts","core/scorm/eventHandler.ts","core/scorm/index.ts"],"names":["self","initialized","apiWrapper","_NoError","code","string","diagnostic","_GeneralException","apiHandle","doLMSInitialize","doLMSFinish","result","api","getAPIHandle","handleError","LMSFinish","toString","err","ErrorHandler","doLMSGetValue","name","LMSGetValue","error","doLMSSetValue","value","LMSSetValue","doLMSCommit","LMSCommit","LMSInitialize","LMSGetLastError","LMSGetErrorString","LMSGetDiagnostic","theAPI","findAPI","window","opener","getAPI","win","findAPITries","API","parent","getApiWrapper","startTime","errorHandlers","console","log","bind","lmsReporting","initialize","status","Date","addEventListener","endSession","showWarningMessage","progressProvider","getProgress","progress","JSON","parse","e","saveProgress","progressResult","stringify","statusResult","removeProgress","userInfoProvider","getUsername","getAccountId","getAccountHomePage","location","origin","protocol","host","courseFinished","course","isPassed","courseFinalized","removeEventListener","score","addErrorHandler","handler","push","msg","index","length","duration","getTime","replace","event","returnValue","output","doInitialize","message","Terminate","doGetValue","doSetValue","Commit","Initialize","GetValue","SetValue","GetLastError","GetErrorString","GetDiagnostic","API_1484_11","str","milliseconds","Math","round","seconds","floor","minutes","hours","millisecondsStr","convertTimeSpanToLmsTimeString","is2004","this","lms2004","lms","eventEmitter","on","events","COURSE_FINISHED","COURSE_FINALIZED","off","Scorm","eventHandler"],"mappings":"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","file":"static/js/7.f59a53dc.chunk.js","sourcesContent":["/* eslint-disable */\nconst self: { [key: string]: any } = {\n  initialized: false,\n  apiWrapper: getApiWrapper(),\n  startTime: null\n};\n\nconst CMI_SUSPEND_DATA = 'cmi.suspend_data';\nconst CMI_CORE_EXIT = 'cmi.core.exit';\nconst CMI_CORE_LESSON_STATUS = 'cmi.core.lesson_status';\n\nconst errorHandlers: any = [console.log.bind(console)]; // Array which contains all error handlers (use addErrorHandler method to add new handlers)\n\nconst lmsReporting: { [key: string]: any } = {\n  initialize() {\n    self.initialized = self.apiWrapper.doLMSInitialize() === 'true';\n    setLessonStatus('incomplete');\n    if (self.initialized) {\n      self.startTime = new Date();\n      if (window.addEventListener) {\n        window.addEventListener('unload', endSession);\n        window.addEventListener('beforeunload', showWarningMessage);\n      }\n    }\n  },\n\n  progressProvider: {\n    getProgress,\n    saveProgress,\n    removeProgress\n  },\n\n  userInfoProvider: {\n    getUsername() {\n      return self.apiWrapper.doLMSGetValue('cmi.core.student_name');\n    },\n    getAccountId() {\n      return self.apiWrapper.doLMSGetValue('cmi.core.student_id');\n    },\n    getAccountHomePage() {\n      return `${window.location.origin || window.location.protocol}//${window.location.host}`;\n    }\n  },\n\n  courseFinished: sendCourseResults,\n  courseFinalized: finalizeCourseSession,\n\n  addErrorHandler\n};\n\nexport default lmsReporting;\n\nfunction addErrorHandler(handler: any) {\n  errorHandlers.push(handler);\n}\n\nfunction handleError(msg: any) {\n  for(var index = 0; index < errorHandlers.length; index++) {\n    errorHandlers[index](msg);\n}\n}\n\nfunction endSession() {\n  const endTime = new Date();\n  const duration = endTime.getTime() - self.startTime.getTime();\n  self.apiWrapper.doLMSSetValue('cmi.core.session_time', convertTimeSpanToLmsTimeString(duration));\n  self.apiWrapper.doLMSCommit();\n\n  self.apiWrapper.doLMSFinish();\n}\n\nfunction showWarningMessage(event: any) {\n  event.returnValue = '';\n  return '';\n}\n\nfunction convertTimeSpanToLmsTimeString(milliseconds: any) {\n  return new Date(0, 0, 0, 0, 0, 0, milliseconds)\n    .toString()\n    .replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1');\n}\n\nfunction getProgress() {\n  let progress: any = {};\n  try {\n    progress = JSON.parse(self.apiWrapper.doLMSGetValue(CMI_SUSPEND_DATA));\n  } catch (e) {\n    handleError('Unable to restore progress');\n  }\n  return progress;\n}\n\nfunction saveProgress(progress: any) {\n  const progressResult =\n    self.apiWrapper.doLMSSetValue(CMI_SUSPEND_DATA, JSON.stringify(progress)) === 'true';\n  const statusResult =\n    self.apiWrapper.doLMSSetValue(CMI_CORE_LESSON_STATUS, 'incomplete') === 'true';\n  const result = progressResult && statusResult;\n  if (result) {\n    self.apiWrapper.doLMSSetValue(CMI_CORE_EXIT, 'suspend');\n    self.apiWrapper.doLMSCommit();\n  }\n  return result;\n}\n\nfunction removeProgress() {\n  self.apiWrapper.doLMSSetValue(CMI_CORE_LESSON_STATUS, 'passed');\n  const result = self.apiWrapper.doLMSSetValue(CMI_SUSPEND_DATA, '') === 'true';\n  if (result) {\n    self.apiWrapper.doLMSSetValue(CMI_CORE_EXIT, '');\n    self.apiWrapper.doLMSCommit();\n  }\n\n  return result;\n}\n\nfunction sendCourseResults(course: any) {\n  self.apiWrapper.doLMSSetValue(\n    CMI_CORE_LESSON_STATUS,\n    course.isPassed ? 'passed' : 'failed'\n  );\n  self.apiWrapper.doLMSCommit();\n}\n\nfunction finalizeCourseSession(course: any) {\n  if (window.removeEventListener) {\n    window.removeEventListener('unload', endSession);\n    window.removeEventListener('beforeunload', showWarningMessage);\n  }\n  \n  self.apiWrapper.doLMSSetValue('cmi.core.score.min', '0');\n  self.apiWrapper.doLMSSetValue('cmi.core.score.max', '100');\n  self.apiWrapper.doLMSSetValue('cmi.core.score.raw', course.score);\n  \n  endSession();\n}\n\nfunction setLessonStatus(status: any) {\n  self.apiWrapper.doLMSSetValue(CMI_CORE_LESSON_STATUS, status);\n}\n\nfunction getApiWrapper() {\n  // Define exception/error codes\n  const _NoError = { code: '0', string: 'No Error', diagnostic: 'No Error' };\n  const _GeneralException = {\n    code: '101',\n    string: 'General Exception',\n    diagnostic: 'General Exception'\n  };\n\n  let initialized = false;\n\n  // local variable definitions\n  let apiHandle: any = null;\n\n  return {\n    doLMSInitialize,\n    doLMSFinish,\n    doLMSGetValue,\n    doLMSSetValue,\n    doLMSCommit\n  };\n\n  /*******************************************************************************\n   **\n   ** Function: doLMSInitialize()\n   ** Inputs:  None\n   ** Return:  true if the initialization was successful, or\n   **          false if the initialization failed.\n   **\n   ** Description:\n   ** Initialize communication with LMS by calling the LMSInitialize\n   ** function which will be implemented by the LMS.\n   **\n   *******************************************************************************/\n  function doLMSInitialize() {\n    if (initialized) {\n      return 'true'\n    }\n\n    const api = getAPIHandle();\n    if (api == null) {\n      handleError(\n        \"Unable to locate the LMS's API Implementation.\\nLMSInitialize was not successful.\"\n      );\n      return 'false';\n    }\n\n    const result = api.LMSInitialize('');\n    if (result.toString() !== 'true') {\n      const err = ErrorHandler();\n      handleError(`LMSInitialize failed with error code: ${err.code}`);\n    } else {\n      initialized = true;\n    }\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doLMSFinish()\n   ** Inputs:  None\n   ** Return:  true if successful\n   **          false if failed.\n   **\n   ** Description:\n   ** Close communication with LMS by calling the LMSFinish\n   ** function which will be implemented by the LMS\n   **\n   *******************************************************************************/\n  function doLMSFinish() {\n    if (!initialized) {\n      return 'true';\n    }\n    let result: any;\n\n    const api = getAPIHandle();\n    if (api == null) {\n      handleError(\"Unable to locate the LMS's API Implementation.\\nLMSFinish was not successful.\");\n      return 'false';\n    } else {\n      // call the LMSFinish function that should be implemented by the API\n      result = api.LMSFinish('');\n      if (result.toString() !== 'true') {\n        const err = ErrorHandler();\n        handleError(`LMSFinish failed with error code: ${err.code}`);\n      }\n    }\n\n    initialized = false;\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doLMSGetValue(name)\n   ** Inputs:  name - string representing the cmi data model defined category or\n   **             element (e.g. cmi.core.student_id)\n   ** Return:  The value presently assigned by the LMS to the cmi data model\n   **       element defined by the element or category identified by the name\n   **       input value.\n   **\n   ** Description:\n   ** Wraps the call to the LMS LMSGetValue method\n   **\n   *******************************************************************************/\n  function doLMSGetValue(name: any) {\n    const api = getAPIHandle();\n    let result = '';\n    if (api == null) {\n      handleError(\n        \"Unable to locate the LMS's API Implementation.\\nLMSGetValue was not successful.\"\n      );\n    } else if (!initialized && !doLMSInitialize()) {\n      let err = ErrorHandler(); // get why doLMSInitialize() returned false\n      handleError(\n        'LMSGetValue failed - Could not initialize communication with the LMS - error code: ' +\n          err.code\n      );\n    } else {\n      result = api.LMSGetValue(name);\n\n      let error = ErrorHandler();\n      if (error.code != _NoError.code) {\n        // an error was encountered so display the error description\n        handleError('LMSGetValue(' + name + ') failed. \\n' + error.code + ': ' + error.string);\n        result = '';\n      }\n    }\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doLMSSetValue(name, value)\n   ** Inputs:  name -string representing the data model defined category or element\n   **          value -the value that the named element or category will be assigned\n   ** Return:  true if successful\n   **          false if failed.\n   **\n   ** Description:\n   ** Wraps the call to the LMS LMSSetValue function\n   **\n   *******************************************************************************/\n  function doLMSSetValue(name: any, value: any) {\n    const api = getAPIHandle();\n    let result = 'false';\n    let err;\n    if (api == null) {\n      handleError(\n        \"Unable to locate the LMS's API Implementation.\\nLMSSetValue was not successful.\"\n      );\n    } else if (!initialized && !doLMSInitialize()) {\n      err = ErrorHandler(); // get why doLMSInitialize() returned false\n      handleError(\n        'LMSSetValue failed - Could not initialize communication with the LMS - error code: ' +\n        err.code\n      );\n    } else {\n      result = api.LMSSetValue(name, value);\n      if (result.toString() != 'true') {\n        err = ErrorHandler();\n        handleError(\n          'LMSSetValue(' + name + ', ' + value + ') failed. \\n' + err.code + ': ' + err.string\n        );\n      }\n    }\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doLMSCommit()\n   ** Inputs:  None\n   ** Return:  true if successful\n   **          false if failed.\n   **\n   ** Description:\n   ** Commits the data to the LMS.\n   **\n   *******************************************************************************/\n  function doLMSCommit() {\n    const api = getAPIHandle();\n    let result = 'false';\n    let err;\n    if (api == null) {\n      handleError(\"Unable to locate the LMS's API Implementation.\\nLMSCommit was not successful.\");\n    } else if (!initialized && !doLMSInitialize()) {\n      err = ErrorHandler(); // get why doLMSInitialize() returned false\n      handleError(\n        'LMSCommit failed - Could not initialize communication with the LMS - error code: ' +\n        err.code\n      );\n    } else {\n      result = api.LMSCommit('');\n      if (result != 'true') {\n        err = ErrorHandler();\n        handleError('LMSCommit failed - error code: ' + err.code);\n      }\n    }\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function ErrorHandler()\n   ** Inputs:  None\n   ** Return:  The current error\n   **\n   ** Description:\n   ** Determines if an error was encountered by the previous API call\n   ** and if so, returns the error.\n   **\n   ** Usage:\n   ** var last_error = ErrorHandler();\n   ** if (last_error.code != _NoError.code)\n   ** {\n   **    handleError(\"Encountered an error. Code: \" + last_error.code +\n   **                                \"\\nMessage: \" + last_error.string +\n   **                                \"\\nDiagnostics: \" + last_error.diagnostic);\n   ** }\n   *******************************************************************************/\n  function ErrorHandler() {\n    const error = { code: _NoError.code, string: _NoError.string, diagnostic: _NoError.diagnostic };\n    const api = getAPIHandle();\n    if (api == null) {\n      handleError(\n        \"Unable to locate the LMS's API Implementation.\\nCannot determine LMS error code.\"\n      );\n      error.code = _GeneralException.code;\n      error.string = _GeneralException.string;\n      error.diagnostic =\n        \"Unable to locate the LMS's API Implementation. Cannot determine LMS error code.\";\n      return error;\n    }\n\n    // check for errors caused by or from the LMS\n    error.code = api.LMSGetLastError().toString();\n    if (error.code != _NoError.code) {\n      // an error was encountered so display the error description\n      error.string = api.LMSGetErrorString(error.code);\n      error.diagnostic = api.LMSGetDiagnostic('');\n    }\n\n    return error;\n  }\n\n  /******************************************************************************\n   **\n   ** Function getAPIHandle()\n   ** Inputs:  None\n   ** Return:  value contained by APIHandle\n   **\n   ** Description:\n   ** Returns the handle to API object if it was previously set,\n   ** otherwise it returns null\n   **\n   *******************************************************************************/\n  function getAPIHandle() {\n    if (apiHandle == null) {\n      apiHandle = getAPI();\n    }\n\n    return apiHandle;\n  }\n\n  /*******************************************************************************\n   **\n   ** Function findAPI(win)\n   ** Inputs:  win - a Window Object\n   ** Return:  If an API object is found, it's returned, otherwise null is returned\n   **\n   ** Description:\n   ** This function looks for an object named API in parent and opener windows\n   **\n   *******************************************************************************/\n  function findAPI(win: any) {\n    let findAPITries = 0;\n    while (win.API == null && win.parent != null && win.parent != win) {\n      findAPITries++;\n      // Note: 7 is an arbitrary number, but should be more than sufficient\n      if (findAPITries > 7) {\n        handleError('Error finding API -- too deeply nested.');\n        return null;\n      }\n\n      win = win.parent;\n    }\n    return win.API;\n  }\n\n  /*******************************************************************************\n   **\n   ** Function getAPI()\n   ** Inputs:  none\n   ** Return:  If an API object is found, it's returned, otherwise null is returned\n   **\n   ** Description:\n   ** This function looks for an object named API, first in the current window's\n   ** frame hierarchy and then, if necessary, in the current window's opener window\n   ** hierarchy (if there is an opener window).\n   **\n   *******************************************************************************/\n  function getAPI() {\n    let theAPI = findAPI(window);\n    if (theAPI == null && window.opener != null && typeof window.opener != 'undefined') {\n      theAPI = findAPI(window.opener);\n    }\n\n    return theAPI;\n  }\n}\n/* eslint-enable */\n","/* eslint-disable */\nconst self: { [key: string]: any } = {\n    initialized: false,\n    apiWrapper: getApiWrapper(),\n    startTime: null\n  };\n  \n  const CMI_SUSPEND_DATA = 'cmi.suspend_data';\n  const CMI_CORE_EXIT = 'cmi.exit';\n  const CMI_CORE_COMPLETION_STATUS = 'cmi.completion_status';\n  const CMI_CORE_SUCCESS_STATUS = 'cmi.success_status';\n  \n  const errorHandlers: any = [console.log.bind(console)]; // Array which contains all error handlers (use addErrorHandler method to add new handlers)\n  \n  const lmsReporting: { [key: string]: any } = {\n    initialize() {\n      self.initialized = self.apiWrapper.doLMSInitialize() === 'true';\n      self.apiWrapper.doLMSSetValue(CMI_CORE_COMPLETION_STATUS, 'incomplete');\n      self.apiWrapper.doLMSSetValue(CMI_CORE_SUCCESS_STATUS, 'unknown');\n\n      if (self.initialized) {\n        self.startTime = new Date();\n        if (window.addEventListener) {\n          window.addEventListener('unload', endSession);\n          window.addEventListener('beforeunload', showWarningMessage);\n        }\n      }\n    },\n  \n    progressProvider: {\n      getProgress,\n      saveProgress,\n      removeProgress\n    },\n  \n    userInfoProvider: {\n      getUsername() {\n        return self.apiWrapper.doLMSGetValue('cmi.learner_name');\n      },\n      getAccountId() {\n        return self.apiWrapper.doLMSGetValue('cmi.learner_id');\n      },\n      getAccountHomePage() {\n        return `${window.location.origin || window.location.protocol}//${window.location.host}`;\n      }\n    },\n  \n    courseFinished: sendCourseResults,\n    courseFinalized: finalizeCourseSession,\n  \n    addErrorHandler\n  };\n  \n  export default lmsReporting;\n  \n  function addErrorHandler(handler: any) {\n    errorHandlers.push(handler);\n  }\n  \n  function handleError(msg: any) {\n    for(let index = 0; index < errorHandlers.length; index++) {\n      errorHandlers[index](msg);\n  }\n  }\n  \n  function endSession() {\n    const endTime = new Date();\n    const duration = endTime.getTime() - self.startTime.getTime();\n    self.apiWrapper.doLMSSetValue('cmi.session_time', convertTimeSpanToLmsTimeString(duration));\n    self.apiWrapper.doLMSCommit();\n  \n    self.apiWrapper.doLMSFinish();\n  }\n  \n  function showWarningMessage(event: any) {\n    event.returnValue = '';\n    return '';\n  }\n  \n  function convertTimeSpanToLmsTimeString(duration: any) {\n    const milliseconds = Math.round((duration % 1000) / 10),\n        seconds = Math.floor((duration / 1000) % 60),\n        minutes = Math.floor((duration / (1000 * 60)) % 60),\n        hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n\n    const millisecondsStr = milliseconds > 0 ? `.${milliseconds}` : \"\";\n    return `PT${hours}H${minutes}M${seconds}${millisecondsStr}S`;\n  }\n  \n  function getProgress() {\n    let progress: any = {};\n    try {\n      progress = JSON.parse(self.apiWrapper.doLMSGetValue(CMI_SUSPEND_DATA));\n    } catch (e) {\n      handleError('Unable to restore progress');\n    }\n    return progress;\n  }\n  \n  function saveProgress(progress: any) {\n    const progressResult =\n      self.apiWrapper.doLMSSetValue(CMI_SUSPEND_DATA, JSON.stringify(progress)) === 'true';\n    const statusResult =\n      self.apiWrapper.doLMSSetValue(CMI_CORE_COMPLETION_STATUS, 'incomplete') === 'true';\n    const result = progressResult && statusResult;\n    if (result) {\n      self.apiWrapper.doLMSSetValue(CMI_CORE_EXIT, 'suspend');\n      self.apiWrapper.doLMSCommit();\n    }\n    return result;\n  }\n  \n  function removeProgress() {\n    const result = self.apiWrapper.doLMSSetValue(CMI_SUSPEND_DATA, '') === 'true';\n    if (result) {\n      self.apiWrapper.doLMSSetValue(CMI_CORE_EXIT, '');\n      self.apiWrapper.doLMSCommit();\n    }\n  \n    return result;\n  }\n \n  function sendCourseResults(course: any) {\n    self.apiWrapper.doLMSSetValue(CMI_CORE_COMPLETION_STATUS, 'completed');\n    self.apiWrapper.doLMSSetValue(\n      CMI_CORE_SUCCESS_STATUS,\n      course.isPassed ? 'passed' : 'failed'\n    );\n    self.apiWrapper.doLMSCommit();\n  }\n  \n  function finalizeCourseSession(course: any) {\n    if (window.removeEventListener) {\n      window.removeEventListener('unload', endSession);\n      window.removeEventListener('beforeunload', showWarningMessage);\n    }\n    \n    self.apiWrapper.doLMSSetValue('cmi.score.min', '0');\n    self.apiWrapper.doLMSSetValue('cmi.score.max', '100');\n    self.apiWrapper.doLMSSetValue('cmi.score.raw', course.score);\n    self.apiWrapper.doLMSSetValue('cmi.score.scaled', course.score / 100);\n\n    endSession();\n  }\n \n  function getApiWrapper() {\n    var debug = true;  // set this to false to turn debugging off\n    var output = window.console; // output can be set to any object that has a log(string) function\n    // such as: var output = { log: function(str){alert(str);} };\n\n    // Define exception/error codes\n    const _NoError = { \"code\": \"0\", \"string\": \"No Error\", \"diagnostic\": \"No Error\" };\n    const _GeneralException = { \"code\": \"101\", \"string\": \"General Exception\", \"diagnostic\": \"General Exception\" };\n    const _AlreadyInitialized = { \"code\": \"103\", \"string\": \"Already Initialized\", \"diagnostic\": \"Already Initialized\" };\n\n    let initialized = false;\n\n    // local variable definitions\n    let apiHandle: any = null;\n\n    return {\n        doLMSInitialize: doInitialize,\n        doLMSFinish: doTerminate,\n        doLMSGetValue: doGetValue,\n        doLMSSetValue: doSetValue,\n        doLMSCommit: doCommit\n    };\n\n\n    /*******************************************************************************\n    **\n    ** Function: doInitialize()\n    ** Inputs:  None\n    ** Return:  true if the initialization was successful, or\n    **          false if the initialization failed.\n    **\n    ** Description:\n    ** Initialize communication with LMS by calling the Initialize\n    ** function which will be implemented by the LMS.\n    **\n    *******************************************************************************/\n    function doInitialize() {\n        if (initialized) return \"true\";\n\n        var api = getAPIHandle();\n        if (api == null) {\n            message(\"Unable to locate the LMS's API Implementation.\\nInitialize was not successful.\");\n            return \"false\";\n        }\n\n        var result = api.Initialize(\"\");\n\n        if (result.toString() != \"true\") {\n            var err = ErrorHandler();\n            message(\"Initialize failed with error code: \" + err.code);\n        }\n        else {\n            initialized = true;\n        }\n\n        return result.toString();\n    }\n\n    /*******************************************************************************\n    **\n    ** Function doTerminate()\n    ** Inputs:  None\n    ** Return:  true if successful\n    **          false if failed.\n    **\n    ** Description:\n    ** Close communication with LMS by calling the Terminate\n    ** function which will be implemented by the LMS\n    **\n    *******************************************************************************/\n    function doTerminate() {\n        if (!initialized) return \"true\";\n\n        var api = getAPIHandle();\n        if (api == null) {\n            message(\"Unable to locate the LMS's API Implementation.\\nTerminate was not successful.\");\n            return \"false\";\n        }\n        else {\n            // call the Terminate function that should be implemented by the API\n            var result = api.Terminate(\"\");\n            if (result.toString() != \"true\") {\n                var err = ErrorHandler();\n                message(\"Terminate failed with error code: \" + err.code);\n            }\n        }\n\n        initialized = false;\n\n        return result.toString();\n    }\n\n    /*******************************************************************************\n    **\n    ** Function doGetValue(name)\n    ** Inputs:  name - string representing the cmi data model defined category or\n    **             element (e.g. cmi.learner_id)\n    ** Return:  The value presently assigned by the LMS to the cmi data model\n    **       element defined by the element or category identified by the name\n    **       input value.\n    **\n    ** Description:\n    ** Wraps the call to the GetValue method\n    **\n    *******************************************************************************/\n    function doGetValue(name: any) {\n        var api = getAPIHandle();\n        var result = \"\";\n        if (api == null) {\n            message(\"Unable to locate the LMS's API Implementation.\\nGetValue was not successful.\");\n        }\n        else if (!initialized && !doInitialize()) {\n            var err = ErrorHandler();\n            message(\"GetValue failed - Could not initialize communication with the LMS - error code: \" + err.code);\n        }\n        else {\n            result = api.GetValue(name);\n\n            var error = ErrorHandler();\n            if (error.code != _NoError.code) {\n                // an error was encountered so display the error description\n                message(\"GetValue(\" + name + \") failed. \\n\" + error.code + \": \" + error.string);\n                result = \"\";\n            }\n        }\n        return result.toString();\n    }\n\n    /*******************************************************************************\n    **\n    ** Function doSetValue(name, value)\n    ** Inputs:  name -string representing the data model defined category or element\n    **          value -the value that the named element or category will be assigned\n    ** Return:  true if successful\n    **          false if failed.\n    **\n    ** Description:\n    ** Wraps the call to the SetValue function\n    **\n    *******************************************************************************/\n    function doSetValue(name: any, value: any) {\n        var api = getAPIHandle();\n        var result = \"false\";\n        if (api == null) {\n            message(\"Unable to locate the LMS's API Implementation.\\nSetValue was not successful.\");\n        }\n        else if (!initialized && !doInitialize()) {\n            var error = ErrorHandler();\n            message(\"SetValue failed - Could not initialize communication with the LMS - error code: \" + error.code);\n        }\n        else {\n            result = api.SetValue(name, value);\n            if (result.toString() != \"true\") {\n                var err = ErrorHandler();\n                message(\"SetValue(\" + name + \", \" + value + \") failed. \\n\" + err.code + \": \" + err.string);\n            }\n        }\n\n        return result.toString();\n    }\n\n    /*******************************************************************************\n    **\n    ** Function doCommit()\n    ** Inputs:  None\n    ** Return:  true if successful\n    **          false if failed\n    **\n    ** Description:\n    ** Commits the data to the LMS.\n    **\n    *******************************************************************************/\n    function doCommit() {\n        var api = getAPIHandle();\n        var result = \"false\";\n        if (api == null) {\n            message(\"Unable to locate the LMS's API Implementation.\\nCommit was not successful.\");\n        }\n        else if (!initialized && !doInitialize()) {\n            var error = ErrorHandler();\n            message(\"Commit failed - Could not initialize communication with the LMS - error code: \" + error.code);\n        }\n        else {\n            result = api.Commit(\"\");\n            if (result != \"true\") {\n                var err = ErrorHandler();\n                message(\"Commit failed - error code: \" + err.code);\n            }\n        }\n\n        return result.toString();\n    }\n\n    /*******************************************************************************\n    **\n    ** Function doGetLastError()\n    ** Inputs:  None\n    ** Return:  The error code that was set by the last LMS function call\n    **\n    ** Description:\n    ** Call the GetLastError function\n    **\n    *******************************************************************************/\n    function doGetLastError() {\n        var api = getAPIHandle();\n        if (api == null) {\n            message(\"Unable to locate the LMS's API Implementation.\\nGetLastError was not successful.\");\n            //since we can't get the error code from the LMS, return a general error\n            return _GeneralException.code;\n        }\n\n        return api.GetLastError().toString();\n    }\n\n    /*******************************************************************************\n    **\n    ** Function doGetErrorString(errorCode)\n    ** Inputs:  errorCode - Error Code\n    ** Return:  The textual description that corresponds to the input error code\n    **\n    ** Description:\n    ** Call the GetErrorString function\n    **\n    ********************************************************************************/\n    function doGetErrorString(errorCode: any) {\n        var api = getAPIHandle();\n        if (api == null) {\n            message(\"Unable to locate the LMS's API Implementation.\\nGetErrorString was not successful.\");\n            return _GeneralException.string;\n        }\n\n        return api.GetErrorString(errorCode).toString();\n    }\n\n    /*******************************************************************************\n    **\n    ** Function doGetDiagnostic(errorCode)\n    ** Inputs:  errorCode - Error Code(integer format), or null\n    ** Return:  The vendor specific textual description that corresponds to the\n    **          input error code\n    **\n    ** Description:\n    ** Call the LMSGetDiagnostic function\n    **\n    *******************************************************************************/\n    function doGetDiagnostic(errorCode: any) {\n        var api = getAPIHandle();\n        if (api == null) {\n            message(\"Unable to locate the LMS's API Implementation.\\nGetDiagnostic was not successful.\");\n            return \"Unable to locate the LMS's API Implementation. GetDiagnostic was not successful.\";\n        }\n\n        return api.GetDiagnostic(errorCode).toString();\n    }\n\n    /*******************************************************************************\n    **\n    ** Function ErrorHandler()\n    ** Inputs:  None\n    ** Return:  The current error\n    **\n    ** Description:\n    ** Determines if an error was encountered by the previous API call\n    ** and if so, returns the error.\n    **\n    ** Usage:\n    ** var last_error = ErrorHandler();\n    ** if (last_error.code != _NoError.code)\n    ** {\n    **    message(\"Encountered an error. Code: \" + last_error.code +\n    **                                \"\\nMessage: \" + last_error.string +\n    **                                \"\\nDiagnostics: \" + last_error.diagnostic);\n    ** }\n    *******************************************************************************/\n    function ErrorHandler() {\n        var error = { \"code\": _NoError.code, \"string\": _NoError.string, \"diagnostic\": _NoError.diagnostic };\n        var api = getAPIHandle();\n        if (api == null) {\n            message(\"Unable to locate the LMS's API Implementation.\\nCannot determine LMS error code.\");\n            error.code = _GeneralException.code;\n            error.string = _GeneralException.string;\n            error.diagnostic = \"Unable to locate the LMS's API Implementation. Cannot determine LMS error code.\";\n            return error;\n        }\n\n        // check for errors caused by or from the LMS\n        error.code = api.GetLastError().toString();\n        if (error.code != _NoError.code) {\n            // an error was encountered so display the error description\n            error.string = api.GetErrorString(error.code);\n            error.diagnostic = api.GetDiagnostic(\"\");\n        }\n\n        return error;\n    }\n\n    /******************************************************************************\n    **\n    ** Function getAPIHandle()\n    ** Inputs:  None\n    ** Return:  value contained by APIHandle\n    **\n    ** Description:\n    ** Returns the handle to API object if it was previously set,\n    ** otherwise it returns null\n    **\n    *******************************************************************************/\n    function getAPIHandle() {\n        if (apiHandle == null) {\n            apiHandle = getAPI();\n        }\n\n        return apiHandle;\n    }\n\n\n    /*******************************************************************************\n    **\n    ** Function findAPI(win)\n    ** Inputs:  win - a Window Object\n    ** Return:  If an API object is found, it's returned, otherwise null is returned\n    **\n    ** Description:\n    ** This function looks for an object named API_1484_11 in parent and opener\n    ** windows\n    **\n    *******************************************************************************/\n    function findAPI(win: any) {\n        var findAPITries = 0;\n        while ((win.API_1484_11 == null) && (win.parent != null) && (win.parent != win)) {\n            findAPITries++;\n\n            if (findAPITries > 500) {\n                message(\"Error finding API -- too deeply nested.\");\n                return null;\n            }\n\n            win = win.parent;\n\n        }\n        return win.API_1484_11;\n    }\n\n    /*******************************************************************************\n    **\n    ** Function getAPI()\n    ** Inputs:  none\n    ** Return:  If an API object is found, it's returned, otherwise null is returned\n    **\n    ** Description:\n    ** This function looks for an object named API_1484_11, first in the current window's\n    ** frame hierarchy and then, if necessary, in the current window's opener window\n    ** hierarchy (if there is an opener window).\n    **\n    *******************************************************************************/\n    function getAPI() {\n        var theAPI = findAPI(window);\n        if ((theAPI == null) && (window.opener != null) && (typeof (window.opener) != \"undefined\")) {\n            theAPI = findAPI(window.opener);\n        }\n        if (theAPI == null) {\n            message(\"Unable to find an API adapter\");\n        }\n        return theAPI\n    }\n\n    /*******************************************************************************\n    **\n    ** Function findObjective(objId)\n    ** Inputs:  objId - the id of the objective\n    ** Return:  the index where this objective is located\n    **\n    ** Description:\n    ** This function looks for the objective within the objective array and returns\n    ** the index where it was found or it will create the objective for you and return\n    ** the new index.\n    **\n    *******************************************************************************/\n    function findObjective(objId: any) {\n        var num = +doGetValue(\"cmi.objectives._count\");\n        var objIndex = -1;\n\n        for (var i = 0; i < num; ++i) {\n            if (doGetValue(\"cmi.objectives.\" + i + \".id\") == objId) {\n                objIndex = i;\n                break;\n            }\n        }\n\n        if (objIndex == -1) {\n            message(\"Objective \" + objId + \" not found.\");\n            objIndex = num;\n            message(\"Creating new objective at index \" + objIndex);\n            doSetValue(\"cmi.objectives.\" + objIndex + \".id\", objId);\n        }\n        return objIndex;\n    }\n\n    /*******************************************************************************\n    ** NOTE: This is a SCORM 2004 4th Edition feature.\n    *\n    ** Function findDataStore(id)\n    ** Inputs:  id - the id of the data store\n    ** Return:  the index where this data store is located or -1 if the id wasn't found\n    **\n    ** Description:\n    ** This function looks for the data store within the data array and returns\n    ** the index where it was found or returns -1 to indicate the id wasn't found\n    ** in the collection.\n    **\n    ** Usage:\n    ** var dsIndex = findDataStore(\"myds\");\n    ** if (dsIndex > -1)\n    ** {\n    **    doSetValue(\"adl.data.\" + dsIndex + \".store\", \"save this info...\");\n    ** }\n    ** else\n    ** {\n    **    var appending_data = doGetValue(\"cmi.suspend_data\");\n    **    doSetValue(\"cmi.suspend_data\", appending_data + \"myds:save this info\");\n    ** }\n    *******************************************************************************/\n    function findDataStore(id: any) {\n        var num = +doGetValue(\"adl.data._count\");\n        var index = -1;\n\n        // if the get value was not null and is a number\n        // in other words, we got an index in the adl.data array\n        if (num != null && !isNaN(num)) {\n            for (var i = 0; i < num; ++i) {\n                if (doGetValue(\"adl.data.\" + i + \".id\") == id) {\n                    index = i;\n                    break;\n                }\n            }\n\n            if (index == -1) {\n                message(\"Data store \" + id + \" not found.\");\n            }\n        }\n\n        return index;\n    }\n\n    /*******************************************************************************\n    **\n    ** Function message(str)\n    ** Inputs:  String - message you want to send to the designated output\n    ** Return:  none\n    ** Depends on: boolean debug to indicate if output is wanted\n    **             object output to handle the messages. must implement a function\n    **             log(string)\n    **\n    ** Description:\n    ** This function outputs messages to a specified output. You can define your own\n    ** output object. It will just need to implement a log(string) function. This\n    ** interface was used so that the output could be assigned the window.console object.\n    *******************************************************************************/\n    function message(str: any) {\n        if (debug) {\n            output.log(str);\n        }\n    }\n}\n  /* eslint-enable */\n  ","import eventEmitter, { events } from 'core/events/eventEmitter';\nimport lms from './lms';\nimport lms2004 from './lms2004';\n\nclass LmsEventHandler {\n  apiWrapper: any;\n\n  on(is2004: boolean) {\n    this.apiWrapper = is2004 ? lms2004 : lms;\n\n    eventEmitter.on(events.COURSE_FINISHED, this.apiWrapper.courseFinished);\n    eventEmitter.on(events.COURSE_FINALIZED, this.apiWrapper.courseFinalized);\n  }\n\n  off() {\n    eventEmitter.off(events.COURSE_FINISHED, this.apiWrapper.courseFinished);\n    eventEmitter.off(events.COURSE_FINALIZED, this.apiWrapper.courseFinalized);\n  }\n}\n\nexport default new LmsEventHandler();\n","import eventHandler from './eventHandler';\nimport lms from './lms';\nimport lms2004 from './lms2004';\n\nclass Scorm {\n  apiWrapper: any;\n\n  get addErrorHandler() {\n    return this.apiWrapper.addErrorHandler;\n  }\n\n  get userInfoProvider() {\n    return this.apiWrapper.userInfoProvider;\n  }\n\n  get progressProvider() {\n    return this.apiWrapper.progressProvider;\n  }\n\n  async initialize(is2004: boolean) {\n    this.apiWrapper = is2004 ? lms2004 : lms;\n    \n    this.apiWrapper.initialize();\n    eventHandler.on(is2004);\n  }\n}\n\nexport default new Scorm();\n"],"sourceRoot":""}